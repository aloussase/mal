(do

(def! not
  (fn* (a)
        (if a false true)))

(def! load-file
  (fn* (f)
        (eval (read-string (slurp f)))))

(defmacro! unless
  (fn* (condition body)
       `(if (not ~condition)
          ~body)))

(defmacro! when
  (fn* (condition body)
       `(if ~condition
          ~body)))

(defmacro! fun
  (fn* (fun-name args-list & body)
       `(def! ~fun-name
          (fn* ~args-list ~@body))))

(defmacro! cond
  (fn* (& xs)
       (if (> (count xs) 0)
         (list 'if (first xs)
               (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond"))
               (cons 'cond (rest (rest xs)))))))


(fun inc (x) (+ 1 x))
(fun dec (x) (- 1 x))

)
